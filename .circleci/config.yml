# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@8.1.2
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          # Update this line with the directory that contains your tests project file
          name: Run tests
          command: |
            dotnet test

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
      - aws-ecr/build-and-push-image:
          aws-access-key-id: ${AWS_ACCESS_KEY_ID}
          aws-cli-version: latest
          aws-secret-access-key: ${AWS_ACCESS_SECRET}
          # context: myContext
          # create-repo: true
          executor: aws-ecr/default
          extra-build-args: '--compress'
          # new-profile-name: newProfileName
          # no-output-timeout: 20m
          platform: linux/amd64
          # profile-name: myProfileName
          # public-registry: false
          # push-image: true
          region: ${AWS_REGION}
          registry-id: ${AWS_ECR_REGISTRY_ID}
          repo: just-todoit
          repo-scan-on-push: true
          # role-arn: 'arn:aws:iam::123456789012:role/testing'
          # skip-when-tags-exist: false
          # source-profile: sourceProfileName
          # tag: 'latest,myECRRepoTag'

